# -*- coding: utf-8 -*-
"""checkpointalgorithme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-o0rds5oxTvHwG7AUg4JUpMvXgqqcN6f
"""

def binary_search(A, l, h, k):  #EX1
    if h >= l:
        mid = int(l + (h - l)/2)
        print(mid)
        if A[mid] == k:
            return 'k is found'
        elif A[mid] > k:
            return binary_search(A, l, mid-1, k)
        else:
            return binary_search(A, mid+1, h, k)
    else:
        return 'k is not found'

A =[2,1,6,4,9]
k=6 ;l=0; h=len(A)-1;
binary_search(A, l, h, k)

#EX2
def power(a,b):
  P=a**b
  print(P)

power(2,3)

#EX3
def bubbleSort(list2):
    for passnum in range(len(list2)-1,0,-1):
        for i in range(passnum):
            if list2[i]>list2[i+1]:
                temp = list2[i]
                list2[i] = list2[i+1]
                list2[i+1] = temp
    return list2

list2 =[29,13,22,37,52,49,46,71,56]
bubbleSort(list2)

#EX4
def mergeSort(myList):
    if len(myList) > 1:
        mid = len(myList) // 2
        left = myList[:mid]
        right = myList[mid:]

        mergeSort(left)
        mergeSort(right)

        i = 0
        j = 0
        
        k = 0
        
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
             
              myList[k] = left[i]
              
              i += 1
            else:
                myList[k] = right[j]
                j += 1
            
            k += 1

        
        while i < len(left):
            myList[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            myList[k]=right[j]
            j += 1
            k += 1

myList =[29,13,22,37,52,49,46,71,56]
mergeSort(myList)
print(myList)

#EX5
def partition(array, start, end):
    pivot = array[start]
    low = start + 1
    high = end
    while True:
       
        while low <= high and array[high] >= pivot:
            high = high - 1

       
        while low <= high and array[low] <= pivot:
            low = low + 1

        
        if low <= high:
            array[low], array[high] = array[high], array[low]
           
        else:
    
            break

    array[start], array[high] = array[high], array[start]

    return high

array = [13, 22, 29, 37, 42, 46, 49, 56, 71]
partition(array, 0, len(array) - 1)
print(array)